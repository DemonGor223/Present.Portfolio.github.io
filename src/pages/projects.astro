---
import Layout from '../layouts/Layout.astro'
import { ProjectCard } from '../components/ProjectCard'
import { projects } from '../data/project'

// Obtener etiquetas únicas de todos los proyectos
const allTags = [...new Set(projects.flatMap((project) => project.tags))].sort()
---

<Layout title="Proyectos Personales">
  <main class="min-h-screen py-20 px-4">
    <div class="container mx-auto max-w-6xl">
      <!-- Encabezado -->
      <div class="text-center mb-12">
        <a href="/" class="inline-flex items-center text-blue-600 hover:text-blue-800 mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"
            ></path>
          </svg>
          Volver al inicio
        </a>
        <h1 class="text-4xl font-bold text-blue-900 mb-4">Mis Proyectos</h1>
        <p class="text-blue-600 max-w-2xl mx-auto">Explora mis últimos proyectos y experimentos. Cada proyecto representa un desafío único y su solución.</p>
      </div>

      <!-- Sección de Búsqueda y Filtros -->
      <div class="bg-white/80 backdrop-blur-lg rounded-3xl p-6 shadow-xl mb-8">
        <div class="flex flex-col gap-4">
          <!-- Fila de Búsqueda y Reinicio -->
          <div class="flex gap-4">
            <div class="flex-1">
              <input
                type="text"
                id="search"
                placeholder="Buscar proyectos..."
                class="w-full px-4 py-2 rounded-xl bg-white border border-blue-100 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-colors"
              />
            </div>
            <button id="resetFilters" class="px-4 py-2 text-blue-600 border border-blue-100 rounded-xl hover:bg-blue-50 transition-colors"> Reiniciar Filtros </button>
          </div>

          <!-- Filtro de Etiquetas -->
          <div class="flex-1">
            <p class="text-sm text-blue-600 mb-2">Filtrar por temas:</p>
            <div class="flex flex-wrap gap-2">
              {
                allTags.map((tag) => (
                  <label class="inline-flex items-center">
                    <input type="checkbox" value={tag} class="tag-checkbox hidden" />
                    <span class="px-3 py-1 rounded-full border border-blue-100 text-sm cursor-pointer hover:bg-blue-50 transition-colors tag-label">{tag}</span>
                  </label>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <!-- Cuadrícula de Proyectos -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="projectsGrid">
        {
          projects.map((project) => (
            <div class="project-wrapper">
              <ProjectCard client:load project={project} />
            </div>
          ))
        }
      </div>
    </div>
  </main>
</Layout>

<script>
  interface ProjectDataItem {
    element: Element
    title: string
    description: string
    tags: string[]
  }

  let projectsData: ProjectDataItem[] = []

  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search') as HTMLInputElement
    const tagCheckboxes = document.querySelectorAll('.tag-checkbox') as NodeListOf<HTMLInputElement>
    const projectsGrid = document.getElementById('projectsGrid')
    const resetButton = document.getElementById('resetFilters')

    if (!searchInput || !projectsGrid || !resetButton) return

    // Almacenar datos iniciales de proyectos
    projectsData = Array.from(projectsGrid.children).map((child) => ({
      element: child,
      title: child.querySelector('h3')?.textContent?.toLowerCase() || '',
      description: child.querySelector('p')?.textContent?.toLowerCase() || '',
      tags: Array.from(child.querySelectorAll('[data-tag]')).map((tag) => tag.getAttribute('data-tag')?.toLowerCase() || ''),
    }))

    // Función de filtrado
    const filterProjects = () => {
      const searchTerm = searchInput.value.toLowerCase()
      const selectedTags = Array.from(tagCheckboxes)
        .filter((checkbox) => checkbox.checked)
        .map((checkbox) => checkbox.value.toLowerCase())

      projectsData.forEach((project) => {
        const matchesSearch = project.title.includes(searchTerm) || project.description.includes(searchTerm)

        const matchesTags = selectedTags.length === 0 || selectedTags.every((tag) => project.tags.includes(tag))

        const wrapper = (project.element as Element).closest('.project-wrapper')
        if (wrapper) {
          wrapper.classList.toggle('hidden', !(matchesSearch && matchesTags))
        }
      })
    }

    // Función de reinicio
    const resetFilters = () => {
      searchInput.value = ''
      tagCheckboxes.forEach((checkbox) => {
        checkbox.checked = false
        const label = checkbox.nextElementSibling
        if (label) {
          label.classList.remove('bg-blue-500', 'text-white')
          label.classList.remove('border-blue-500')
        }
      })
      filterProjects()
    }

    // Agregar event listeners
    searchInput.addEventListener('input', filterProjects)
    resetButton.addEventListener('click', resetFilters)
    tagCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', (e) => {
        const label = (e.target as HTMLInputElement).nextElementSibling
        label?.classList.toggle('bg-blue-500', (e.target as HTMLInputElement).checked)
        label?.classList.toggle('text-white', (e.target as HTMLInputElement).checked)
        filterProjects()
      })
    })
  })
</script>

<style>
  .tag-checkbox:checked + .tag-label {
    @apply bg-blue-500 text-white border-blue-500;
  }

  /* Asegurar que los contenedores de proyectos mantengan el diseño de cuadrícula */
  .project-wrapper:not(.hidden) {
    display: block;
  }
</style>
